/*! 
@page hardware_soft AVR development board code overview

 This part of the documentation gives a structural overview over the code
 written for the AVR development board. For a complete description of all
 files, macros and function, please refer to the file documentation later in 
 this document.

@section hardware_soft_timer Timer overview

 The macros and functions to handle some aspects of timer 0 and timer 1 in 
 timers.h are well documented. Usage of the macros should be easy by reading
 the file documentation. There might though be two aspects which might need
 some clarification:

	@subsection timers_top_extra TOP and COMP_EXTRA designation

	 Like in the Atmega32 datasheet, the label TOP refers to the maximal value the
	 timer is actually counting to. This can be a different value from a timers
	 maximal value (MAX). In the Clear Timer on Compare mode (CTC mode), a timer
	 counts to the value in the primary timers compare register and will then be
	 cleared. This means the timer counted to a certain value in this compare
	 register. This value is not necessarily the maximum value the timer could 
	 count to. This value is called TOP. 

	 For the timer 1 an additional compare register exists. To keep it simple, I
	 did not use the term used in the data sheet (Output Compare Register 1 B, 
	 OCR1B) but called it COMP_EXTRA. COMP_EXTRA seemed to be suitable because it 
	 is an additional possibility to compare the timer count with a number. This
	 register does not have influence on the count value in any mode.

	@subsection timers_extra_reachable COMP_EXTRA reachability

	 Since the CTC mode is the only mode which is supported by timers.h , one very
	 important consequence arises: If the COMP_EXTRA value is bigger than the TOP 
	 value, the flag corresponding to COMP_EXTRA will never be set. This should
	 not be a problem because the order in which the comparisons appears is not
	 relevant for a program flow, since the order of checking for the flags can be
	 changed.

@section hardware_soft_disp Display overview (display.h and display_snippets.h)

 For a description of all macros and functions, please go to the display.h and 
 display_snippets.h file documentation. 

 	@subsection disp_relevant_info External sources

	 There are two external documents which are useful when trying to follow this
	 description:

	 <ul>
	 	<li>
			Display controller data sheet st7066.pdf: 
			http://www.lcd-module.de/fileadmin/eng/pdf/zubehoer/st7066.pdf
	 	</li>
		<li>
			Display data sheet: http://www.display-elektronik.de/DEM20485SYH-LY.PDF
		</li>
	 </ul>

	@subsection disp_design Design

	 The macros and functions used to handle the display in a convenient way are
	 split up into two files: display.h and display_snippets.h . 
	 display_snippets.h contains very basic macros which perform simple action
	 like setting up the needed ports, starting and stopping the wait timer,
	 reacting on timer events and so on. This basic components allow to compose
	 macros or functions that can solve certain tasks related to the display.
	 Such macros and functions can be found in the display.h header file.

	 This design allows to reimplementation of similar functionality in different
	 macros or function, but in an adjusted and optimized way for the function.
	 Moreover, it significantly increased the readability and maintainability of
	 the code.

	 The user might never have to take a look into the display_snippets.h header
	 file. Some user adjustable variables can be overridden in the user C file,
	 others must be changed in the header file.

	 Definitions that can be overwritten in the user C file are:
	 <ul>
	 	<li>LCD_CLOCKDIVISION</li>
	 	<li>LCD_EXTRA_DIV</li>
	 	<li>LCD_TOP_DIV</li>
	 </ul>
	 Those allow to somewhat tune the speed, at which data is send to the display.
	 The default settings should work safely for all displays. It is noteworthy
	 that LCD_EXTRA_DIV and LCD_TOP_DIV influence also the duty cyle of the
	 generated clock.

	 Definitions that have to be changed in the display.h header file.
	 <ul>
	 	<li>LCD_RS</li>
	 	<li>LCD_EN</li>
	 	<li>LCD_D4</li>
	 	<li>LCD_D5</li>
	 	<li>LCD_D6</li>
	 	<li>LCD_D7</li>
	 	<li>LCD_PORT</li>
	 	<li>LCD_DDR</li>
		<li>LCD_MAX_CHARS</li>
		<li>LCD_MAX_CHARS_LINE</li>
	 </ul>

	 In this project there is naturally no need to change any of those values,
	 but giving the possibility to do so will improve portability and re usability
	 of the code. 

	@subsection disp_clocking Clocking

	 To produce the clock signal on the E pin on the display, macros that start 
	 with "LCD_WAIT" in display_snippets.h are used. Those commands "front end"
	 corresponding timer 1 macros and add functionality. The names for the macros
	 are not very friendly to new user and where chosen out of lack of creativity
	 and time pressure. The names are friendly for users which have knowledge 
	 about timer 1 in timers.h . The file documentation should make a correct use
	 of those statements apparent, but here is the reference order for the commands
	 excluding data setup statements. Data set up statements should be used 
	 according to timing considerations. For more information, please consult the
	 display data sheet mentioned at \ref disp_relevant_info.

	 <table border="1">
	 	<tr>
			<th><b>Macro</b></th>
			<th><b>Description</b></th>
	 	</tr>
	 	<tr>
			<td>LCD_WAIT_SETUP</td>
			<td>
			    Sets the timer used for timing the wait cycles up. This happens according
			    to the LCD_CLOCKDIVISION, LCD_EXTRA_DIV and LCD_TOP_DIV macros.
			</td>
	 	</tr>
	 	<tr>
			<td>LCD_WAIT_TIMER_START</td>
			<td>Starts the timer used for timing the wait cycles.</td>
	 	</tr>
	 	<tr>
			<td>LCD_WAIT_CLK_HIGH</td>
			<td>
			    Sets LCD_EN high and waits for the EXTRA flag. The EXTRA flag is the 
			    first flag which goes high after the timer starts. Its value is
			    defined in LCD_EXTRA_DIV.
			</td>
	 	</tr>
	 	<tr>
			<td>LCD_WAIT_CLK_LOW</td>
			<td>
			    Sets LCD_EN low and waits for the TOP flag. The TOP flag is the second
			    flag that goes high after the timer starts. Its value is defined in 
			    LCD_TOP_DIV. At this value, the timer will also be cleared.
			</td>
	 	</tr>
	 	<tr>
			<td>LCD_WAIT_TIMER_STOP</td>
			<td>Stops the timer used for timing the wait cycles.</td>
	 	</tr>
	 </table>

	 To see practical examples, please refer to the source code for display.h,
	 which is found after the file documentation.

	@subsection disp_osci_pics Oscilloscope screen shots  
	 
	 Here are some oscilloscope screen shots from the communication with the LCD 
	 to allow the reader to gain a somewhat more physical grasp of the theory 
	 above. Only a selection of the pins needed to communicate with the display is
	 shown. This is due to the limited channels the used oscilloscope has.

	 This list relates the channel number of the oscilloscope to the measured 
	 signal.

	 <ol>
	 	<li>E (Enable)</li>
	 	<li>RS (Register Select)</li>
	 	<li>D4 (Data 4)</li>
	 	<li>D5 (Data 5)</li>
	 </ol>

	 The following screen shot shows a writing operation for three characters and 
	 one command. The character writing operation is distinguishable from the
	 command operation by taking a look at the second, green, signal. The high part
	 indicates the character writing operation, the low part the command operation.

	 @image html disp_three_char_two_cmd.png "Character write and command operation"
	 @image latex disp_three_char_two_cmd.eps "Character write and command operation" width=\textwidth

	 Here we can see a longer write action. The measurements are taken for the 
	 first, the clock or E signal.

	 @image html lcd_write_excerpt.png "Excerpt from the lcd_write funkiton"
	 @image latex lcd_write_excerpt.eps "Excerpt from the lcd_write funkiton" width=\textwidth

	 The following screen shot shows a more close view on a data operation. Signals
	 two and four are not shown  to be able to concentrate on the data operation.
	 The display will read the data at a falling edge of the clock (E) signal. We
	 can also see, that new data is set up shortly before the rising edge of the
	 clock.

	 @image html disp_data_exchange_excerpt.png "Closeup data writing operation"
	 @image latex disp_data_exchange_excerpt.png "Closeup data writing operation" width=\textwidth

	@subsection lcd_init_desc LCD initialisation: LCD_INIT

	 This macro initialises the display in 4 pin mode and switches it on. To do 
	 so, it must follow a sequence during which the display can be brought into a
	 certain state. The following table will show the steps:

	 <table border="1">
	 	<tr>
			<th><b>Action</b></th>
			<th><b>Description</b></th>
			<th><b>Command</b></th>
		</tr>
	 	<tr>
			<td>Wait for 15ms</td>
			<td>Power on delay.</td>
			<td>_delay_ms(15);</td>
		</tr>
	 	<tr>
			<td>Send 0011 as command</td>
			<td>Initialisation command. The display controller expects this.</td>
			<td>LCD_CMD_NIBBLE( 0b0011 );</td>
		</tr>
	 	<tr>
			<td>Wait for 5 ms</td>
			<td>
			    The display controller demands a delay of more than 4.1 ms. 5 ms is 
			    used.
			</td>
			<td>_delay_ms(5);</td>
		</tr>
	 	<tr>
			<td>Send 0011 as command</td>
			<td>Initialisation command. The display expects this.</td>
			<td>LCD_CMD_NIBBLE( 0b0011 );</td>
		</tr>
	 	<tr>
			<td>Wait for 1 ms</td>
			<td>
			    The display controller demands a delay of more than 100 us. 1 ms is 
			    used.
			</td>
			<td>_delay_ms(1);</td>
		</tr>
	 	<tr>
			<td>Send 0011 as command</td>
			<td>Initialisation command. The display expects this.</td>
			<td>LCD_CMD_NIBBLE( 0b0011 );</td>
		</tr>
	 	<tr>
			<td>Wait for 1 ms</td>
			<td>
			    The data sheet for the display controller does not request a delay here.
			    There is one anyway, because the supervisors reference function uses 
			    one here.  After the initialisation worked, removing the delay was not 
			    tested.
			</td>
			<td>_delay_ms(1);</td>
		</tr>
	 	<tr>
			<td>Send 0011 as command</td>
			<td>Initialisation command. The display expects this.</td>
			<td>LCD_CMD_NIBBLE( 0b0011 );</td>
		</tr>
	 	<tr>
			<td>Wait for 1 ms</td>
			<td>
			    The data sheet for the display controller does not request a delay here.
			    There is one anyway, because the supervisors reference function uses 
			    one here.  After the initialisation worked, removing the delay was not 
			    tested.
			</td>
			<td>_delay_ms(1);</td>
		</tr>
	</table>
	<table border="1">
	 	<tr>
			<td>Funktion Set: Byte 00101000 is written as command</td>
			<td>
			    With the function set command, the display allows to set (next to 
			    others) the mode for the interface. We use choose the 4 bit interface.
			    The data sheet is inconsistent here. In the instruction table, other
			    pins claim this functionality than in the initialisation description.
			    We used the instruction table as reference, since this was also what
			    the initialisation reference function from our supervisor did.
			</td>
			<td>LCD_CMD_BYTE( 0b00101000 );</td>
		</tr>
		<tr>
			<td>Wait for 1 ms</td>
			<td>
			    The data sheet for the display controller does not request a delay here.
			    There is one anyway, because the supervisors reference function uses 
			    one here.  After the initialisation worked, removing the delay was not 
			    tested. Also, this delay respects execution time the LCD might need.
			</td>
			<td>_delay_ms(1);</td>
		</tr>
		<tr>
			<td>Display off: Byte 00001000 is written as command</td>
			<td>Turns the display off. Expected command by the display controller.</td>
			<td>LCD_CMD_BYTE( 0b00001000 );</td>
		</tr>
		<tr>
			<td>Wait for 1 ms</td>
			<td>
			    The data sheet for the display controller does not request a delay here.
			    There is one anyway, because the supervisors reference function uses 
			    one here.  After the initialisation worked, removing the delay was not 
			    tested. Also, this delay respects execution time the LCD might need.
			</td>
			<td>_delay_ms(1);</td>
		</tr>
		<tr>
			<td>Display clear: Byte 00000001 is written as command.</td>
			<td>Clears the display. Expected command by the display controller.</td>
			<td>LCD_CMD_BYTE( 0b00000001 );</td>
		</tr>
	</table>
	<table border="1">
		<tr>
			<td>Wait for 2 ms</td>
			<td>
			    The instruction table in the display controller data sheet specifies a
			    minimum execution time of 1.54 ms to clear the display. 2 ms is used 
			    instead.
			</td>
			<td>_delay_ms(2);</td>
		</tr>
		<tr>
			<td>Entry mode set: Byte 00000110 is written as command.</td>
			<td>
			    The cursor movement is set set to increment, the shift property is 
			    disabled.
			</td>
			<td>LCD_CMD_BYTE( 0b00000110 );</td>
		</tr>
		<tr>
			<td>Display on: Byte 00001100 is written as a command.</td>
			<td>
			    Switches the display on, so there is no need to do so on the user side.
			    This is no more part of the required initialisation for the display
			    controller. 
			</td>
			<td>LCD_CMD_BYTE( 0b00001100 );</td>
		</tr>
	 </table>

	 The following oscilloscope picture shows the signals (in this order) E, RS, 
	 D4, D5 for the entire display initialisation described above. The data lines
	 D6 and D7 are not on the picture because the oscilloscope only has 4 inputs.

	 @image html lcd_init_complete.png "Oscilloscope screen shot for the LCD_INIT macro."
	 @image latex lcd_init_complete.eps "Oscilloscope screen shot for the LCD_INIT macro." width=\textwidth

@section hardware_soft_spi SPI

 The SPI (Serial peripheral Interface) module is responsible of the 
 communication between RFID reader(Atmega8) and the Atmega32 through the build 
 in SPI interface on the Atmega8 and Atmega32 microprocessor. The Atmega8 has 
 a set of command codes from RFIDCodes.h header for the data handling from the 
 RFID reader.

 First the data is written one byte at time to the SPDR(data register). SS is 
 pulled down at the start of the communication then SCK clock is started. The 
 data shifted between the master and the slave, byte at a time. After the 
 transfer is complete SCK clock and SPIF flag is set high signaling that the 
 transfer is completed and SS is pulled high again to finish.

 @image html spi_block.png "SPI block diagram"
 @image latex spi_block.eps "SPI block diagram" width=\textwidth

 SPI_MasterTransmit(chat data) is used to send the command codes to the RFID, 
 the parameter Data is the command to be sent to RFID. First 0x55 command is 
 sent to the RFID to get the UID, the slave reacts by sending an acknowledge (
 0x86) byte then 7 bytes of data of the UID. While the slave receives the 
 command the slave sends dummy data 0xF5 to the master. For every byte 
 transmitted to the slave, a byte is transmitted so we use send 0xF5 dummy 
 data to push out the data from the slave.

 @image html spi1.png "Command send 0x55"
 @image latex spi1.eps "Command send 0x55" width=\textwidth

 @image html spi2.png "Sending dumy data first time"
 @image latex spi2.eps "Sending dumy data first time" width=\textwidth

 @image html spi3.png "Sending dumy data second time, data receive"
 @image latex spi3.eps "Sending dumy data second time, data receive" width=\textwidth

 @image html spi4.png "Sending dumy data third time, data receive"
 @image latex spi4.eps "Sending dumy data third time, data receive" width=\textwidth

 @image html spi5.png "Sending dumy data 4. time, data receive"
 @image latex spi5.eps "Sending dumy data 4. time, data receive" width=\textwidth

 @image html spi6.png "Sending dumy data 5. time, data receive"
 @image latex spi6.eps "Sending dumy data 5. time, data receive" width=\textwidth

 @image html spi7.png "Sending dumy data 6. time, data receive"
 @image latex spi7.eps "Sending dumy data 6. time, data receive" width=\textwidth

 @image html spi8.png "Sending dumy data 7. time, data receive"
 @image latex spi8.eps "Sending dumy data 7. time, data receive" width=\textwidth

 @image html spi9.png "Sending dumy data 8. time, data receive"
 @image latex spi9.eps "Sending dumy data 8. time, data receive" width=\textwidth


@section hardware_soft_uart UART

 The Universal Synchronous and Asynchronous serial Receiver and Transmitter 
 (USART) is responsible for the communication between the Atmega32 and the PC 
 terminal. The USART is initialized in full duplex allows communication in 
 both directions simultaneously with a baud rate(bits per second) of 19200. 
 The USART takes bytes of data and transmits them in sequential fashion. At 
 the receiving end there is another USART that re-assembles bits into complete 
 bytes.
 Each USART contains a shift register, which is the fundamental method of 
 conversion between serial and parallel forms. As soon as data is deposited in 
 the shift register after completion of the previous character, the USART 
 hardware generates a start bit, shifts the required number of data bits out 
 to the line, generates and appends the parity bit (if used), and appends the 
 stop bits.

 @image html uart_frame_1.png "UART frame"
 @image latex uart_frame_1.eps "UART frame" width=\textwidth

 Both USART transmit and receive buffer share the same register UDR(USART Data 
 Register).  UDRE(USART Data Register) flag needs to be high when when writing 
 to the transmit buffer and receive buffer. 

 @image html uart_seq.png "UART transmit using polling"
 @image latex uart_seq.eps "UART transmit using polling" width=\textwidth

 @image html uart_seq_receive.png "UART receive using polling"
 @image latex uart_seq_receive.eps "UART receive using polling" width=\textwidth

 The state machine implements the spi.h, uart.h, timers.h and rfid.h all of 
 which collaborate to simplify the task of scanning a card, reading the data 
 on it and parsing the card UID, along with other information o the PC 
 terminal.

@section hardware_soft_state_usart_spi UART and SPI state machine

 @image html state_uart_spi.eps "UART and SPI state machine"
 @image latex state_uart_spi.eps "UART and SPI state machine" width=\textwidth

 Transitions between states are only triggered by external and internal 
 interrupts except the activatet_timer_int state.

 <b>Idle state:</b>

 The state waits for an external interrupt on CARD_PRES. When the interrupt is 
 set high we make the transition to next state card_present.

 <b>card_present state:</b>

 In the card_present state we call SPI_MasterTransmit(0x55) sending the 
 command to the RFID reader asking for the UID of the card being scanned. Then 
 we move to the next state wait_on_data.

 <b>wait_on_data state:</b>

 The state waits for external interrupt on DATA_READY. The RFID indicates by 
 setting the Data_READY to high when it is ready to send data. When the 
 interrupt is set high we make the transition to next state activate_timer.

 <b>activate_timer_int state:</b>

 In the activate_timer_int state timer interrupt gets activated to count to up 
 to certain value for making sure the buffer is full and for setting timerflag 
 high. Then move to the next read_data.

 <b>read_data state:</b>

 In the read_data  SPI_MasterTransmit(0xF5) gets called, spi transmits dummy 
 data gets sent that forces the data out of the RFID.  The RFID reader reacts 
 by responding with  an acknowledge 0x86 and  7 bytes of data of the UID are 
 received by the SPDR(Data Register). FILL_BUFFER takes data from the SPRD and 
 puts the data in array of chars SPI_MasterTransmit  keeps transmitting dummy 
 data until we have filled the array of 9 chars, then move to the next 
 wait_on_card_removed state.

 <b>wait_on_card_removed state:</b>

 The state waits until external interrupts on CARD_PRES gets low. Then the 
 data gets transmitted with the SendString() to the PC terminal. Then the 
 system reverts to idle state.
*/ 
